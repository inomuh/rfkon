//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: KonSensDataDcps.cpp
//  Source: KonSensDataDcps.idl
//  Generated: Thu Oct 15 17:49:22 2015
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************

#include "KonSensDataDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < KonSensData::ServerReq, struct ServerReqSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < KonSensData::BtSeq, struct BtSeqSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < KonSensData::WifiSeq, struct WifiSeqSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < KonSensData::Msg, struct MsgSeq_uniq_>;
#endif

const char * KonSensData::MsgTypeSupportInterface::_local_id = "IDL:KonSensData/MsgTypeSupportInterface:1.0";

KonSensData::MsgTypeSupportInterface_ptr KonSensData::MsgTypeSupportInterface::_duplicate (KonSensData::MsgTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::MsgTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::MsgTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::MsgTypeSupportInterface_ptr KonSensData::MsgTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   KonSensData::MsgTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (KonSensData::MsgTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < KonSensData::MsgTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::MsgTypeSupportInterface_ptr KonSensData::MsgTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::MsgTypeSupportInterface_ptr result;
   result = dynamic_cast < KonSensData::MsgTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::MsgDataWriter::_local_id = "IDL:KonSensData/MsgDataWriter:1.0";

KonSensData::MsgDataWriter_ptr KonSensData::MsgDataWriter::_duplicate (KonSensData::MsgDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::MsgDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::MsgDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::MsgDataWriter_ptr KonSensData::MsgDataWriter::_narrow (DDS::Object_ptr p)
{
   KonSensData::MsgDataWriter_ptr result = NULL;
   if (p && p->_is_a (KonSensData::MsgDataWriter::_local_id))
   {
      result = dynamic_cast < KonSensData::MsgDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::MsgDataWriter_ptr KonSensData::MsgDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::MsgDataWriter_ptr result;
   result = dynamic_cast < KonSensData::MsgDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::MsgDataReader::_local_id = "IDL:KonSensData/MsgDataReader:1.0";

KonSensData::MsgDataReader_ptr KonSensData::MsgDataReader::_duplicate (KonSensData::MsgDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::MsgDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::MsgDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::MsgDataReader_ptr KonSensData::MsgDataReader::_narrow (DDS::Object_ptr p)
{
   KonSensData::MsgDataReader_ptr result = NULL;
   if (p && p->_is_a (KonSensData::MsgDataReader::_local_id))
   {
      result = dynamic_cast < KonSensData::MsgDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::MsgDataReader_ptr KonSensData::MsgDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::MsgDataReader_ptr result;
   result = dynamic_cast < KonSensData::MsgDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::MsgDataReaderView::_local_id = "IDL:KonSensData/MsgDataReaderView:1.0";

KonSensData::MsgDataReaderView_ptr KonSensData::MsgDataReaderView::_duplicate (KonSensData::MsgDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::MsgDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::MsgDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::MsgDataReaderView_ptr KonSensData::MsgDataReaderView::_narrow (DDS::Object_ptr p)
{
   KonSensData::MsgDataReaderView_ptr result = NULL;
   if (p && p->_is_a (KonSensData::MsgDataReaderView::_local_id))
   {
      result = dynamic_cast < KonSensData::MsgDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::MsgDataReaderView_ptr KonSensData::MsgDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::MsgDataReaderView_ptr result;
   result = dynamic_cast < KonSensData::MsgDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::WifiSeqTypeSupportInterface::_local_id = "IDL:KonSensData/WifiSeqTypeSupportInterface:1.0";

KonSensData::WifiSeqTypeSupportInterface_ptr KonSensData::WifiSeqTypeSupportInterface::_duplicate (KonSensData::WifiSeqTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::WifiSeqTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::WifiSeqTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::WifiSeqTypeSupportInterface_ptr KonSensData::WifiSeqTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   KonSensData::WifiSeqTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (KonSensData::WifiSeqTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < KonSensData::WifiSeqTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::WifiSeqTypeSupportInterface_ptr KonSensData::WifiSeqTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::WifiSeqTypeSupportInterface_ptr result;
   result = dynamic_cast < KonSensData::WifiSeqTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::WifiSeqDataWriter::_local_id = "IDL:KonSensData/WifiSeqDataWriter:1.0";

KonSensData::WifiSeqDataWriter_ptr KonSensData::WifiSeqDataWriter::_duplicate (KonSensData::WifiSeqDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::WifiSeqDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::WifiSeqDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::WifiSeqDataWriter_ptr KonSensData::WifiSeqDataWriter::_narrow (DDS::Object_ptr p)
{
   KonSensData::WifiSeqDataWriter_ptr result = NULL;
   if (p && p->_is_a (KonSensData::WifiSeqDataWriter::_local_id))
   {
      result = dynamic_cast < KonSensData::WifiSeqDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::WifiSeqDataWriter_ptr KonSensData::WifiSeqDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::WifiSeqDataWriter_ptr result;
   result = dynamic_cast < KonSensData::WifiSeqDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::WifiSeqDataReader::_local_id = "IDL:KonSensData/WifiSeqDataReader:1.0";

KonSensData::WifiSeqDataReader_ptr KonSensData::WifiSeqDataReader::_duplicate (KonSensData::WifiSeqDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::WifiSeqDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::WifiSeqDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::WifiSeqDataReader_ptr KonSensData::WifiSeqDataReader::_narrow (DDS::Object_ptr p)
{
   KonSensData::WifiSeqDataReader_ptr result = NULL;
   if (p && p->_is_a (KonSensData::WifiSeqDataReader::_local_id))
   {
      result = dynamic_cast < KonSensData::WifiSeqDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::WifiSeqDataReader_ptr KonSensData::WifiSeqDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::WifiSeqDataReader_ptr result;
   result = dynamic_cast < KonSensData::WifiSeqDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::WifiSeqDataReaderView::_local_id = "IDL:KonSensData/WifiSeqDataReaderView:1.0";

KonSensData::WifiSeqDataReaderView_ptr KonSensData::WifiSeqDataReaderView::_duplicate (KonSensData::WifiSeqDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::WifiSeqDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::WifiSeqDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::WifiSeqDataReaderView_ptr KonSensData::WifiSeqDataReaderView::_narrow (DDS::Object_ptr p)
{
   KonSensData::WifiSeqDataReaderView_ptr result = NULL;
   if (p && p->_is_a (KonSensData::WifiSeqDataReaderView::_local_id))
   {
      result = dynamic_cast < KonSensData::WifiSeqDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::WifiSeqDataReaderView_ptr KonSensData::WifiSeqDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::WifiSeqDataReaderView_ptr result;
   result = dynamic_cast < KonSensData::WifiSeqDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::BtSeqTypeSupportInterface::_local_id = "IDL:KonSensData/BtSeqTypeSupportInterface:1.0";

KonSensData::BtSeqTypeSupportInterface_ptr KonSensData::BtSeqTypeSupportInterface::_duplicate (KonSensData::BtSeqTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::BtSeqTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::BtSeqTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::BtSeqTypeSupportInterface_ptr KonSensData::BtSeqTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   KonSensData::BtSeqTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (KonSensData::BtSeqTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < KonSensData::BtSeqTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::BtSeqTypeSupportInterface_ptr KonSensData::BtSeqTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::BtSeqTypeSupportInterface_ptr result;
   result = dynamic_cast < KonSensData::BtSeqTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::BtSeqDataWriter::_local_id = "IDL:KonSensData/BtSeqDataWriter:1.0";

KonSensData::BtSeqDataWriter_ptr KonSensData::BtSeqDataWriter::_duplicate (KonSensData::BtSeqDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::BtSeqDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::BtSeqDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::BtSeqDataWriter_ptr KonSensData::BtSeqDataWriter::_narrow (DDS::Object_ptr p)
{
   KonSensData::BtSeqDataWriter_ptr result = NULL;
   if (p && p->_is_a (KonSensData::BtSeqDataWriter::_local_id))
   {
      result = dynamic_cast < KonSensData::BtSeqDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::BtSeqDataWriter_ptr KonSensData::BtSeqDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::BtSeqDataWriter_ptr result;
   result = dynamic_cast < KonSensData::BtSeqDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::BtSeqDataReader::_local_id = "IDL:KonSensData/BtSeqDataReader:1.0";

KonSensData::BtSeqDataReader_ptr KonSensData::BtSeqDataReader::_duplicate (KonSensData::BtSeqDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::BtSeqDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::BtSeqDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::BtSeqDataReader_ptr KonSensData::BtSeqDataReader::_narrow (DDS::Object_ptr p)
{
   KonSensData::BtSeqDataReader_ptr result = NULL;
   if (p && p->_is_a (KonSensData::BtSeqDataReader::_local_id))
   {
      result = dynamic_cast < KonSensData::BtSeqDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::BtSeqDataReader_ptr KonSensData::BtSeqDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::BtSeqDataReader_ptr result;
   result = dynamic_cast < KonSensData::BtSeqDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::BtSeqDataReaderView::_local_id = "IDL:KonSensData/BtSeqDataReaderView:1.0";

KonSensData::BtSeqDataReaderView_ptr KonSensData::BtSeqDataReaderView::_duplicate (KonSensData::BtSeqDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::BtSeqDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::BtSeqDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::BtSeqDataReaderView_ptr KonSensData::BtSeqDataReaderView::_narrow (DDS::Object_ptr p)
{
   KonSensData::BtSeqDataReaderView_ptr result = NULL;
   if (p && p->_is_a (KonSensData::BtSeqDataReaderView::_local_id))
   {
      result = dynamic_cast < KonSensData::BtSeqDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::BtSeqDataReaderView_ptr KonSensData::BtSeqDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::BtSeqDataReaderView_ptr result;
   result = dynamic_cast < KonSensData::BtSeqDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::ServerReqTypeSupportInterface::_local_id = "IDL:KonSensData/ServerReqTypeSupportInterface:1.0";

KonSensData::ServerReqTypeSupportInterface_ptr KonSensData::ServerReqTypeSupportInterface::_duplicate (KonSensData::ServerReqTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::ServerReqTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::ServerReqTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::ServerReqTypeSupportInterface_ptr KonSensData::ServerReqTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   KonSensData::ServerReqTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (KonSensData::ServerReqTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < KonSensData::ServerReqTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::ServerReqTypeSupportInterface_ptr KonSensData::ServerReqTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::ServerReqTypeSupportInterface_ptr result;
   result = dynamic_cast < KonSensData::ServerReqTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::ServerReqDataWriter::_local_id = "IDL:KonSensData/ServerReqDataWriter:1.0";

KonSensData::ServerReqDataWriter_ptr KonSensData::ServerReqDataWriter::_duplicate (KonSensData::ServerReqDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::ServerReqDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::ServerReqDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::ServerReqDataWriter_ptr KonSensData::ServerReqDataWriter::_narrow (DDS::Object_ptr p)
{
   KonSensData::ServerReqDataWriter_ptr result = NULL;
   if (p && p->_is_a (KonSensData::ServerReqDataWriter::_local_id))
   {
      result = dynamic_cast < KonSensData::ServerReqDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::ServerReqDataWriter_ptr KonSensData::ServerReqDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::ServerReqDataWriter_ptr result;
   result = dynamic_cast < KonSensData::ServerReqDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::ServerReqDataReader::_local_id = "IDL:KonSensData/ServerReqDataReader:1.0";

KonSensData::ServerReqDataReader_ptr KonSensData::ServerReqDataReader::_duplicate (KonSensData::ServerReqDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::ServerReqDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::ServerReqDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::ServerReqDataReader_ptr KonSensData::ServerReqDataReader::_narrow (DDS::Object_ptr p)
{
   KonSensData::ServerReqDataReader_ptr result = NULL;
   if (p && p->_is_a (KonSensData::ServerReqDataReader::_local_id))
   {
      result = dynamic_cast < KonSensData::ServerReqDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::ServerReqDataReader_ptr KonSensData::ServerReqDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::ServerReqDataReader_ptr result;
   result = dynamic_cast < KonSensData::ServerReqDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * KonSensData::ServerReqDataReaderView::_local_id = "IDL:KonSensData/ServerReqDataReaderView:1.0";

KonSensData::ServerReqDataReaderView_ptr KonSensData::ServerReqDataReaderView::_duplicate (KonSensData::ServerReqDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean KonSensData::ServerReqDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, KonSensData::ServerReqDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

KonSensData::ServerReqDataReaderView_ptr KonSensData::ServerReqDataReaderView::_narrow (DDS::Object_ptr p)
{
   KonSensData::ServerReqDataReaderView_ptr result = NULL;
   if (p && p->_is_a (KonSensData::ServerReqDataReaderView::_local_id))
   {
      result = dynamic_cast < KonSensData::ServerReqDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

KonSensData::ServerReqDataReaderView_ptr KonSensData::ServerReqDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   KonSensData::ServerReqDataReaderView_ptr result;
   result = dynamic_cast < KonSensData::ServerReqDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



