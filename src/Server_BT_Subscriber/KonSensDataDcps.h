//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: KonSensDataDcps.h
//  Source: KonSensDataDcps.idl
//  Generated: Thu Sep 17 15:12:46 2015
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _KONSENSDATADCPS_H_
#define _KONSENSDATADCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps.h"
#include "KonSensData.h"


namespace KonSensData
{

   class MsgTypeSupportInterface;

   typedef MsgTypeSupportInterface * MsgTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < MsgTypeSupportInterface> MsgTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < MsgTypeSupportInterface> MsgTypeSupportInterface_out;


   class MsgDataWriter;

   typedef MsgDataWriter * MsgDataWriter_ptr;
   typedef DDS_DCPSInterface_var < MsgDataWriter> MsgDataWriter_var;
   typedef DDS_DCPSInterface_out < MsgDataWriter> MsgDataWriter_out;


   class MsgDataReader;

   typedef MsgDataReader * MsgDataReader_ptr;
   typedef DDS_DCPSInterface_var < MsgDataReader> MsgDataReader_var;
   typedef DDS_DCPSInterface_out < MsgDataReader> MsgDataReader_out;


   class MsgDataReaderView;

   typedef MsgDataReaderView * MsgDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < MsgDataReaderView> MsgDataReaderView_var;
   typedef DDS_DCPSInterface_out < MsgDataReaderView> MsgDataReaderView_out;


   class WifiSeqTypeSupportInterface;

   typedef WifiSeqTypeSupportInterface * WifiSeqTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < WifiSeqTypeSupportInterface> WifiSeqTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < WifiSeqTypeSupportInterface> WifiSeqTypeSupportInterface_out;


   class WifiSeqDataWriter;

   typedef WifiSeqDataWriter * WifiSeqDataWriter_ptr;
   typedef DDS_DCPSInterface_var < WifiSeqDataWriter> WifiSeqDataWriter_var;
   typedef DDS_DCPSInterface_out < WifiSeqDataWriter> WifiSeqDataWriter_out;


   class WifiSeqDataReader;

   typedef WifiSeqDataReader * WifiSeqDataReader_ptr;
   typedef DDS_DCPSInterface_var < WifiSeqDataReader> WifiSeqDataReader_var;
   typedef DDS_DCPSInterface_out < WifiSeqDataReader> WifiSeqDataReader_out;


   class WifiSeqDataReaderView;

   typedef WifiSeqDataReaderView * WifiSeqDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < WifiSeqDataReaderView> WifiSeqDataReaderView_var;
   typedef DDS_DCPSInterface_out < WifiSeqDataReaderView> WifiSeqDataReaderView_out;


   class BtSeqTypeSupportInterface;

   typedef BtSeqTypeSupportInterface * BtSeqTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < BtSeqTypeSupportInterface> BtSeqTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < BtSeqTypeSupportInterface> BtSeqTypeSupportInterface_out;


   class BtSeqDataWriter;

   typedef BtSeqDataWriter * BtSeqDataWriter_ptr;
   typedef DDS_DCPSInterface_var < BtSeqDataWriter> BtSeqDataWriter_var;
   typedef DDS_DCPSInterface_out < BtSeqDataWriter> BtSeqDataWriter_out;


   class BtSeqDataReader;

   typedef BtSeqDataReader * BtSeqDataReader_ptr;
   typedef DDS_DCPSInterface_var < BtSeqDataReader> BtSeqDataReader_var;
   typedef DDS_DCPSInterface_out < BtSeqDataReader> BtSeqDataReader_out;


   class BtSeqDataReaderView;

   typedef BtSeqDataReaderView * BtSeqDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < BtSeqDataReaderView> BtSeqDataReaderView_var;
   typedef DDS_DCPSInterface_out < BtSeqDataReaderView> BtSeqDataReaderView_out;


   class ServerReqTypeSupportInterface;

   typedef ServerReqTypeSupportInterface * ServerReqTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ServerReqTypeSupportInterface> ServerReqTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ServerReqTypeSupportInterface> ServerReqTypeSupportInterface_out;


   class ServerReqDataWriter;

   typedef ServerReqDataWriter * ServerReqDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ServerReqDataWriter> ServerReqDataWriter_var;
   typedef DDS_DCPSInterface_out < ServerReqDataWriter> ServerReqDataWriter_out;


   class ServerReqDataReader;

   typedef ServerReqDataReader * ServerReqDataReader_ptr;
   typedef DDS_DCPSInterface_var < ServerReqDataReader> ServerReqDataReader_var;
   typedef DDS_DCPSInterface_out < ServerReqDataReader> ServerReqDataReader_out;


   class ServerReqDataReaderView;

   typedef ServerReqDataReaderView * ServerReqDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ServerReqDataReaderView> ServerReqDataReaderView_var;
   typedef DDS_DCPSInterface_out < ServerReqDataReaderView> ServerReqDataReaderView_out;

   struct MsgSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Msg, struct MsgSeq_uniq_> MsgSeq;
   typedef DDS_DCPSSequence_var < MsgSeq> MsgSeq_var;
   typedef DDS_DCPSSequence_out < MsgSeq> MsgSeq_out;
   class MsgTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef MsgTypeSupportInterface_ptr _ptr_type;
      typedef MsgTypeSupportInterface_var _var_type;

      static MsgTypeSupportInterface_ptr _duplicate (MsgTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MsgTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static MsgTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MsgTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      MsgTypeSupportInterface_ptr _this () { return this; }


   protected:
      MsgTypeSupportInterface () {};
      ~MsgTypeSupportInterface () {};
   private:
      MsgTypeSupportInterface (const MsgTypeSupportInterface &);
      MsgTypeSupportInterface & operator = (const MsgTypeSupportInterface &);
   };

   class MsgDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef MsgDataWriter_ptr _ptr_type;
      typedef MsgDataWriter_var _var_type;

      static MsgDataWriter_ptr _duplicate (MsgDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MsgDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static MsgDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MsgDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      MsgDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Msg& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Msg& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Msg& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Msg& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Msg& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Msg& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Msg& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Msg& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Msg& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Msg& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Msg& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Msg& instance_data) = 0;

   protected:
      MsgDataWriter () {};
      ~MsgDataWriter () {};
   private:
      MsgDataWriter (const MsgDataWriter &);
      MsgDataWriter & operator = (const MsgDataWriter &);
   };

   class MsgDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef MsgDataReader_ptr _ptr_type;
      typedef MsgDataReader_var _var_type;

      static MsgDataReader_ptr _duplicate (MsgDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MsgDataReader_ptr _narrow (DDS::Object_ptr obj);
      static MsgDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MsgDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      MsgDataReader_ptr _this () { return this; }

      virtual DDS::Long read (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Msg& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Msg& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Msg& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Msg& instance) = 0;

   protected:
      MsgDataReader () {};
      ~MsgDataReader () {};
   private:
      MsgDataReader (const MsgDataReader &);
      MsgDataReader & operator = (const MsgDataReader &);
   };

   class MsgDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef MsgDataReaderView_ptr _ptr_type;
      typedef MsgDataReaderView_var _var_type;

      static MsgDataReaderView_ptr _duplicate (MsgDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MsgDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static MsgDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MsgDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      MsgDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Msg& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Msg& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Msg& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Msg& instance) = 0;

   protected:
      MsgDataReaderView () {};
      ~MsgDataReaderView () {};
   private:
      MsgDataReaderView (const MsgDataReaderView &);
      MsgDataReaderView & operator = (const MsgDataReaderView &);
   };

   struct WifiSeqSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < WifiSeq, struct WifiSeqSeq_uniq_> WifiSeqSeq;
   typedef DDS_DCPSSequence_var < WifiSeqSeq> WifiSeqSeq_var;
   typedef DDS_DCPSSequence_out < WifiSeqSeq> WifiSeqSeq_out;
   class WifiSeqTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef WifiSeqTypeSupportInterface_ptr _ptr_type;
      typedef WifiSeqTypeSupportInterface_var _var_type;

      static WifiSeqTypeSupportInterface_ptr _duplicate (WifiSeqTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static WifiSeqTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static WifiSeqTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static WifiSeqTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      WifiSeqTypeSupportInterface_ptr _this () { return this; }


   protected:
      WifiSeqTypeSupportInterface () {};
      ~WifiSeqTypeSupportInterface () {};
   private:
      WifiSeqTypeSupportInterface (const WifiSeqTypeSupportInterface &);
      WifiSeqTypeSupportInterface & operator = (const WifiSeqTypeSupportInterface &);
   };

   class WifiSeqDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef WifiSeqDataWriter_ptr _ptr_type;
      typedef WifiSeqDataWriter_var _var_type;

      static WifiSeqDataWriter_ptr _duplicate (WifiSeqDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static WifiSeqDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static WifiSeqDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static WifiSeqDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      WifiSeqDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const WifiSeq& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const WifiSeq& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const WifiSeq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const WifiSeq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const WifiSeq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const WifiSeq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const WifiSeq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const WifiSeq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const WifiSeq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const WifiSeq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (WifiSeq& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const WifiSeq& instance_data) = 0;

   protected:
      WifiSeqDataWriter () {};
      ~WifiSeqDataWriter () {};
   private:
      WifiSeqDataWriter (const WifiSeqDataWriter &);
      WifiSeqDataWriter & operator = (const WifiSeqDataWriter &);
   };

   class WifiSeqDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef WifiSeqDataReader_ptr _ptr_type;
      typedef WifiSeqDataReader_var _var_type;

      static WifiSeqDataReader_ptr _duplicate (WifiSeqDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static WifiSeqDataReader_ptr _narrow (DDS::Object_ptr obj);
      static WifiSeqDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static WifiSeqDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      WifiSeqDataReader_ptr _this () { return this; }

      virtual DDS::Long read (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (WifiSeq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (WifiSeq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (WifiSeq& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const WifiSeq& instance) = 0;

   protected:
      WifiSeqDataReader () {};
      ~WifiSeqDataReader () {};
   private:
      WifiSeqDataReader (const WifiSeqDataReader &);
      WifiSeqDataReader & operator = (const WifiSeqDataReader &);
   };

   class WifiSeqDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef WifiSeqDataReaderView_ptr _ptr_type;
      typedef WifiSeqDataReaderView_var _var_type;

      static WifiSeqDataReaderView_ptr _duplicate (WifiSeqDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static WifiSeqDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static WifiSeqDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static WifiSeqDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      WifiSeqDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (WifiSeq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (WifiSeq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (WifiSeqSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (WifiSeq& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const WifiSeq& instance) = 0;

   protected:
      WifiSeqDataReaderView () {};
      ~WifiSeqDataReaderView () {};
   private:
      WifiSeqDataReaderView (const WifiSeqDataReaderView &);
      WifiSeqDataReaderView & operator = (const WifiSeqDataReaderView &);
   };

   struct BtSeqSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < BtSeq, struct BtSeqSeq_uniq_> BtSeqSeq;
   typedef DDS_DCPSSequence_var < BtSeqSeq> BtSeqSeq_var;
   typedef DDS_DCPSSequence_out < BtSeqSeq> BtSeqSeq_out;
   class BtSeqTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef BtSeqTypeSupportInterface_ptr _ptr_type;
      typedef BtSeqTypeSupportInterface_var _var_type;

      static BtSeqTypeSupportInterface_ptr _duplicate (BtSeqTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static BtSeqTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static BtSeqTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static BtSeqTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      BtSeqTypeSupportInterface_ptr _this () { return this; }


   protected:
      BtSeqTypeSupportInterface () {};
      ~BtSeqTypeSupportInterface () {};
   private:
      BtSeqTypeSupportInterface (const BtSeqTypeSupportInterface &);
      BtSeqTypeSupportInterface & operator = (const BtSeqTypeSupportInterface &);
   };

   class BtSeqDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef BtSeqDataWriter_ptr _ptr_type;
      typedef BtSeqDataWriter_var _var_type;

      static BtSeqDataWriter_ptr _duplicate (BtSeqDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static BtSeqDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static BtSeqDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static BtSeqDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      BtSeqDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const BtSeq& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const BtSeq& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const BtSeq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const BtSeq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const BtSeq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const BtSeq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const BtSeq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const BtSeq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const BtSeq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const BtSeq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (BtSeq& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const BtSeq& instance_data) = 0;

   protected:
      BtSeqDataWriter () {};
      ~BtSeqDataWriter () {};
   private:
      BtSeqDataWriter (const BtSeqDataWriter &);
      BtSeqDataWriter & operator = (const BtSeqDataWriter &);
   };

   class BtSeqDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef BtSeqDataReader_ptr _ptr_type;
      typedef BtSeqDataReader_var _var_type;

      static BtSeqDataReader_ptr _duplicate (BtSeqDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static BtSeqDataReader_ptr _narrow (DDS::Object_ptr obj);
      static BtSeqDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static BtSeqDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      BtSeqDataReader_ptr _this () { return this; }

      virtual DDS::Long read (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (BtSeq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (BtSeq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (BtSeq& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const BtSeq& instance) = 0;

   protected:
      BtSeqDataReader () {};
      ~BtSeqDataReader () {};
   private:
      BtSeqDataReader (const BtSeqDataReader &);
      BtSeqDataReader & operator = (const BtSeqDataReader &);
   };

   class BtSeqDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef BtSeqDataReaderView_ptr _ptr_type;
      typedef BtSeqDataReaderView_var _var_type;

      static BtSeqDataReaderView_ptr _duplicate (BtSeqDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static BtSeqDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static BtSeqDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static BtSeqDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      BtSeqDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (BtSeq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (BtSeq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (BtSeqSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (BtSeq& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const BtSeq& instance) = 0;

   protected:
      BtSeqDataReaderView () {};
      ~BtSeqDataReaderView () {};
   private:
      BtSeqDataReaderView (const BtSeqDataReaderView &);
      BtSeqDataReaderView & operator = (const BtSeqDataReaderView &);
   };

   struct ServerReqSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < ServerReq, struct ServerReqSeq_uniq_> ServerReqSeq;
   typedef DDS_DCPSSequence_var < ServerReqSeq> ServerReqSeq_var;
   typedef DDS_DCPSSequence_out < ServerReqSeq> ServerReqSeq_out;
   class ServerReqTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ServerReqTypeSupportInterface_ptr _ptr_type;
      typedef ServerReqTypeSupportInterface_var _var_type;

      static ServerReqTypeSupportInterface_ptr _duplicate (ServerReqTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ServerReqTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ServerReqTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ServerReqTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ServerReqTypeSupportInterface_ptr _this () { return this; }


   protected:
      ServerReqTypeSupportInterface () {};
      ~ServerReqTypeSupportInterface () {};
   private:
      ServerReqTypeSupportInterface (const ServerReqTypeSupportInterface &);
      ServerReqTypeSupportInterface & operator = (const ServerReqTypeSupportInterface &);
   };

   class ServerReqDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ServerReqDataWriter_ptr _ptr_type;
      typedef ServerReqDataWriter_var _var_type;

      static ServerReqDataWriter_ptr _duplicate (ServerReqDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ServerReqDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ServerReqDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ServerReqDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ServerReqDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const ServerReq& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const ServerReq& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const ServerReq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const ServerReq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const ServerReq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const ServerReq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const ServerReq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const ServerReq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const ServerReq& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const ServerReq& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (ServerReq& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ServerReq& instance_data) = 0;

   protected:
      ServerReqDataWriter () {};
      ~ServerReqDataWriter () {};
   private:
      ServerReqDataWriter (const ServerReqDataWriter &);
      ServerReqDataWriter & operator = (const ServerReqDataWriter &);
   };

   class ServerReqDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ServerReqDataReader_ptr _ptr_type;
      typedef ServerReqDataReader_var _var_type;

      static ServerReqDataReader_ptr _duplicate (ServerReqDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ServerReqDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ServerReqDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ServerReqDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ServerReqDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ServerReq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ServerReq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ServerReq& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ServerReq& instance) = 0;

   protected:
      ServerReqDataReader () {};
      ~ServerReqDataReader () {};
   private:
      ServerReqDataReader (const ServerReqDataReader &);
      ServerReqDataReader & operator = (const ServerReqDataReader &);
   };

   class ServerReqDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ServerReqDataReaderView_ptr _ptr_type;
      typedef ServerReqDataReaderView_var _var_type;

      static ServerReqDataReaderView_ptr _duplicate (ServerReqDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ServerReqDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ServerReqDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ServerReqDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ServerReqDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ServerReq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ServerReq& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ServerReqSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ServerReq& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ServerReq& instance) = 0;

   protected:
      ServerReqDataReaderView () {};
      ~ServerReqDataReaderView () {};
   private:
      ServerReqDataReaderView (const ServerReqDataReaderView &);
      ServerReqDataReaderView & operator = (const ServerReqDataReaderView &);
   };

}




#endif 
