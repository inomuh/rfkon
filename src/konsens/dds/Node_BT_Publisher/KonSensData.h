//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: KonSensData.h
//  Source: KonSensData.idl
//  Generated: Thu Oct 15 17:49:22 2015
//  OpenSplice V6.4.140407OSS
//  
//******************************************************************
#ifndef _KONSENSDATA_H_
#define _KONSENSDATA_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"


namespace KonSensData
{
   struct Msg;
   struct WifiSeq;
   struct BtSeq;
   struct ServerReq;

   struct Msg
   {
         DDS::String_mgr devID;
         DDS::String_mgr hostName;
         DDS::Long dbm;
   };

   typedef DDS_DCPSStruct_var < Msg> Msg_var;
   typedef DDS_DCPSStruct_out < Msg> Msg_out;
   struct MesSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Msg, struct MesSeq_uniq_> MesSeq;
   typedef DDS_DCPSSequence_var < MesSeq> MesSeq_var;
   typedef DDS_DCPSSequence_out < MesSeq> MesSeq_out;

   struct WifiSeq
   {
         typedef DDS::Long _timestamp_slice[2];
         typedef DDS::Long _timestamp[2][2];
         typedef _timestamp _timestamp_out;
         static _timestamp_slice * _timestamp_alloc ();
         static void _timestamp_free (_timestamp_slice *);
         static void _timestamp_copy (_timestamp_slice* to, const _timestamp_slice* from);
         static _timestamp_slice *_timestamp_dup (const _timestamp_slice* from);

         struct _timestamp_uniq_ {};
         typedef DDS_DCPS_MArray_var< _timestamp, _timestamp_slice, struct _timestamp_uniq_> _timestamp_var;
         typedef DDS_DCPS_MArray_forany< _timestamp, _timestamp_slice, struct _timestamp_uniq_> _timestamp_forany;
         _timestamp timestamp;
         DDS::Long userID;
         DDS::Long messageID;
         MesSeq messages;
   };

   typedef DDS_DCPSStruct_var < WifiSeq> WifiSeq_var;
   typedef DDS_DCPSStruct_out < WifiSeq> WifiSeq_out;

   struct BtSeq
   {
         typedef DDS::Long _timestamp_slice[2];
         typedef DDS::Long _timestamp[2][2];
         typedef _timestamp _timestamp_out;
         static _timestamp_slice * _timestamp_alloc ();
         static void _timestamp_free (_timestamp_slice *);
         static void _timestamp_copy (_timestamp_slice* to, const _timestamp_slice* from);
         static _timestamp_slice *_timestamp_dup (const _timestamp_slice* from);

         struct _timestamp_uniq_ {};
         typedef DDS_DCPS_MArray_var< _timestamp, _timestamp_slice, struct _timestamp_uniq_> _timestamp_var;
         typedef DDS_DCPS_MArray_forany< _timestamp, _timestamp_slice, struct _timestamp_uniq_> _timestamp_forany;
         _timestamp timestamp;
         DDS::Long userID;
         DDS::Long messageID;
         MesSeq messages;
   };

   typedef DDS_DCPSStruct_var < BtSeq> BtSeq_var;
   typedef DDS_DCPSStruct_out < BtSeq> BtSeq_out;

   struct ServerReq
   {
         DDS::String_mgr request;
         DDS::Long requestID;
   };

   typedef DDS_DCPSStruct_var < ServerReq> ServerReq_var;
   typedef DDS_DCPSStruct_out < ServerReq> ServerReq_out;
}
template <>
KonSensData::WifiSeq::_timestamp_slice* DDS_DCPS_ArrayHelper < KonSensData::WifiSeq::_timestamp, KonSensData::WifiSeq::_timestamp_slice, KonSensData::WifiSeq::_timestamp_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < KonSensData::WifiSeq::_timestamp, KonSensData::WifiSeq::_timestamp_slice, KonSensData::WifiSeq::_timestamp_uniq_>::copy (KonSensData::WifiSeq::_timestamp_slice *to, const KonSensData::WifiSeq::_timestamp_slice* from);
template <>
void DDS_DCPS_ArrayHelper < KonSensData::WifiSeq::_timestamp, KonSensData::WifiSeq::_timestamp_slice, KonSensData::WifiSeq::_timestamp_uniq_>::free (KonSensData::WifiSeq::_timestamp_slice *ptr);
template <>
KonSensData::BtSeq::_timestamp_slice* DDS_DCPS_ArrayHelper < KonSensData::BtSeq::_timestamp, KonSensData::BtSeq::_timestamp_slice, KonSensData::BtSeq::_timestamp_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < KonSensData::BtSeq::_timestamp, KonSensData::BtSeq::_timestamp_slice, KonSensData::BtSeq::_timestamp_uniq_>::copy (KonSensData::BtSeq::_timestamp_slice *to, const KonSensData::BtSeq::_timestamp_slice* from);
template <>
void DDS_DCPS_ArrayHelper < KonSensData::BtSeq::_timestamp, KonSensData::BtSeq::_timestamp_slice, KonSensData::BtSeq::_timestamp_uniq_>::free (KonSensData::BtSeq::_timestamp_slice *ptr);




#endif 
